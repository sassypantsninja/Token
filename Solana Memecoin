use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program::{invoke, invoke_signed},
    program_error::ProgramError,
    pubkey::Pubkey,
    system_instruction,
};
use spl_token::{
    instruction::{initialize_mint, mint_to, transfer},
    state::Mint,
};

// Define the entry point for the Solana program
entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let payer_account = next_account_info(accounts_iter)?;
    let mint_account = next_account_info(accounts_iter)?;
    let token_account = next_account_info(accounts_iter)?;
    let token_program = next_account_info(accounts_iter)?;

    // Decode the first byte of instruction data to determine the action
    match instruction_data[0] {
        0 => initialize_mint_instruction(program_id, mint_account, payer_account, token_program),
        1 => mint_tokens_instruction(token_program, mint_account, token_account, payer_account),
        2 => transfer_tokens_instruction(token_program, token_account, payer_account),
        _ => {
            msg!("Unknown instruction");
            Err(ProgramError::InvalidInstructionData)
        }
    }
}

// Initialize a new mint
fn initialize_mint_instruction(
    program_id: &Pubkey,
    mint_account: &AccountInfo,
    payer_account: &AccountInfo,
    token_program: &AccountInfo,
) -> ProgramResult {
    let mint_ix = initialize_mint(
        &spl_token::id(),
        mint_account.key,
        payer_account.key,
        None,
        9, // Decimals
    )?;

    invoke_signed(
        &mint_ix,
        &[mint_account.clone(), payer_account.clone(), token_program.clone()],
        &[&[program_id.as_ref(), &[*program_id]]],
    )?;

    msg!("Mint initialized successfully!");
    Ok(())
}

// Mint new tokens to a token account
fn mint_tokens_instruction(
    token_program: &AccountInfo,
    mint_account: &AccountInfo,
    token_account: &AccountInfo,
    payer_account: &AccountInfo,
) -> ProgramResult {
    let mint_to_ix = mint_to(
        &spl_token::id(),
        mint_account.key,
        token_account.key,
        payer_account.key,
        &[],
        1_000_000_000, // Amount of tokens to mint
    )?;

    invoke(
        &mint_to_ix,
        &[
            mint_account.clone(),
            token_account.clone(),
            payer_account.clone(),
            token_program.clone(),
        ],
    )?;

    msg!("Tokens minted successfully!");
    Ok(())
}

// Transfer tokens from one account to another
fn transfer_tokens_instruction(
    token_program: &AccountInfo,
    from_account: &AccountInfo,
    to_account: &AccountInfo,
) -> ProgramResult {
    let transfer_ix = transfer(
        &spl_token::id(),
        from_account.key,
        to_account.key,
        from_account.key,
        &[],
        500_000_000, // Amount of tokens to transfer
    )?;

    invoke(
        &transfer_ix,
        &[from_account.clone(), to_account.clone(), token_program.clone()],
    )?;

    msg!("Tokens transferred successfully!");
    Ok(())
}
